// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registrar.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterRequest struct {
	// ID is used to correlate devices. This will be
	// returned from an initial register request.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f352f3dd33231ae, []int{0}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RegisterResponse struct {
	// ID becomes this device's unique ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Key is the wireguard key that has been generated for this device.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// RancherToken is the token used to register the node with Rancher.
	RancherToken         string   `protobuf:"bytes,3,opt,name=rancher_token,json=rancherToken,proto3" json:"rancher_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f352f3dd33231ae, []int{1}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisterResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RegisterResponse) GetRancherToken() string {
	if m != nil {
		return m.RancherToken
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "api.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "api.RegisterResponse")
}

func init() { proto.RegisterFile("registrar.proto", fileDescriptor_8f352f3dd33231ae) }

var fileDescriptor_8f352f3dd33231ae = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xcf, 0x31, 0x4b, 0xc5, 0x30,
	0x10, 0x07, 0x70, 0x5f, 0x0b, 0xe2, 0x3b, 0xd4, 0x57, 0x82, 0x42, 0x71, 0xaa, 0x71, 0x71, 0x4a,
	0x41, 0x27, 0x57, 0x07, 0x3f, 0x40, 0x70, 0xd1, 0x45, 0xd2, 0xf6, 0x68, 0x42, 0xb1, 0x89, 0x97,
	0xcb, 0xa0, 0x9f, 0x5e, 0x1a, 0x2d, 0x0f, 0xba, 0x1d, 0xbf, 0xfb, 0xc3, 0xfd, 0x0f, 0x0e, 0x84,
	0xa3, 0x8b, 0x4c, 0x86, 0x54, 0x20, 0xcf, 0x5e, 0x94, 0x26, 0x38, 0x79, 0x0b, 0x07, 0x9d, 0x1d,
	0x49, 0xe3, 0x57, 0xc2, 0xc8, 0xe2, 0x12, 0x0a, 0x37, 0xd4, 0xbb, 0x66, 0x77, 0xbf, 0xd7, 0x85,
	0x1b, 0xe4, 0x1b, 0x54, 0xc7, 0x48, 0x0c, 0x7e, 0x8e, 0xb8, 0xcd, 0x88, 0x0a, 0xca, 0x09, 0xbf,
	0xeb, 0x22, 0xc3, 0x32, 0x8a, 0x3b, 0xb8, 0x20, 0x33, 0xf7, 0x16, 0xe9, 0x83, 0xfd, 0x84, 0x73,
	0x5d, 0xe6, 0xdd, 0xf9, 0x3f, 0xbe, 0x2e, 0xf6, 0xf0, 0x02, 0x7b, 0xbd, 0xb6, 0x12, 0x4f, 0x70,
	0xb6, 0xde, 0x11, 0x57, 0xca, 0x04, 0xa7, 0x36, 0xcd, 0x6e, 0xae, 0x37, 0xfa, 0x57, 0x46, 0x9e,
	0x3c, 0xcb, 0xf7, 0x66, 0x74, 0x6c, 0x53, 0xa7, 0x7a, 0xff, 0xd9, 0x8e, 0xc8, 0x3e, 0x31, 0xa1,
	0xe9, 0x6d, 0x6b, 0x12, 0xdb, 0x9f, 0xd6, 0x04, 0xd7, 0x9d, 0xe6, 0xaf, 0x1f, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xc9, 0x34, 0xcd, 0x7f, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegistrarClient is the client API for Registrar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrarClient interface {
	// Define your grpc service interface here
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registrarClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrarClient(cc grpc.ClientConnInterface) RegistrarClient {
	return &registrarClient{cc}
}

func (c *registrarClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/api.Registrar/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrarServer is the server API for Registrar service.
type RegistrarServer interface {
	// Define your grpc service interface here
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedRegistrarServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrarServer struct {
}

func (*UnimplementedRegistrarServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterRegistrarServer(s *grpc.Server, srv RegistrarServer) {
	s.RegisterService(&_Registrar_serviceDesc, srv)
}

func _Registrar_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrarServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Registrar/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrarServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registrar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Registrar",
	HandlerType: (*RegistrarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registrar_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registrar.proto",
}
